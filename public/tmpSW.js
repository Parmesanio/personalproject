// Set this to true for production
var doCache = true;

// Name our cache
var CACHE_NAME = 'my-pwa-cache-v1';

// Delete old caches that are not our current one!
self.addEventListener("activate", event => {
  const cacheWhitelist = [CACHE_NAME];
  event.waitUntil(
    caches.keys()
      .then(keyList =>
        Promise.all(keyList.map(key => {
          if (!cacheWhitelist.includes(key)) {
            console.log('Deleting cache: ' + key)
            return caches.delete(key);
          }
        }))
      )
  );
});

// The first time the user starts up the PWA, 'install' is triggered.
self.addEventListener('install', function(event) {
  if (doCache) {
    event.waitUntil(
      caches.open(CACHE_NAME)
        .then(function(cache) {
          // Get the assets manifest so we can see what our js file is named
          // This is because webpack hashes it
          fetch("asset-manifest.json")
            .then(response => {
              response.json()
            })
            .then(assets => {
              // Open a cache and cache our files
              // We want to cache the page and the main.js generated by webpack
              // We could also cache any static assets like CSS or images
              const urlsToCache = [
                "/",
                assets["main.js"]
              ]
              cache.addAll(urlsToCache)
              console.log('cached');
            })
        })
    );
  }
});

// When the webpage goes to fetch files, we intercept that request and serve up the matching files
// if we have them
self.addEventListener('fetch', function(event) {
    if (doCache) {
      event.respondWith(
          caches.match(event.request).then(function(response) {
              return response || fetch(event.request);
          })
      );
    }
});












// //Cache static assets to serve offline
// const staticAssets = [
//     './index.html',
//     '../src/components/Meet/Meet.js',
//     './main.js',
//     './fallback.json'
// ]

// self.addEventListener('install', async () => {
//     //Take Cached assets and store them for later use
//     const cache = await caches.open('tmp-static');
//     cache.addAll(staticAssets);
// });

// self.addEventListener('fetch', event => {
//     //Events sent from application to the network
//     console.log(event);
    
//     const req = event.request;
//     // console.log('REQ',req);
    
//     const url = new URL(req.url);
//     console.log('url',url == location.origin);
    
//     //Fetching from own site?
//     if (url.origin == location.origin) {
//         //Define response to given fetch events
//     event.respondWith(cacheFirst(req)); 
//     } else {
//         event.respondWith(networkFirst(req));
//     }
// });

// async function cacheFirst(req) {
//     const cachedResponse = await caches.match(req);
//     return cachedResponse || fetch(req);
// }
// async function networkFirst(req) {
//     console.log('networkFirst', req);
    
//     const cache = await caches.open('tmp-dynamic');
//     try {
//         const res = await fetch(req);
//         console.log('RES', res);
        
//         cache.put(req, res.clone());
//         console.log('CACHE', cache);
        
//         return res;
//     } catch (error) {
//         const cachedResponse =  await cache.match(req);
//         return cachedResponse || await caches.match('./fallback.json')
//     }
// }

// let deferredPrompt;
// //Home Screen Prompt
// self.addEventListener('beforeinstallprompt', event => {
//     event.preventDefault();

//     deferredPrompt = event;
//     console.log('Deferred Prompt', deferredPrompt);
//     btnAdd.style.display = 'block'
// });